{"ast":null,"code":"import { StereoEffect } from \"./StereoEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Gain } from \"../core/context/Gain\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Split } from \"../component/channel/Split\";\nimport { Merge } from \"../component/channel/Merge\";\n/**\n * Base class for stereo feedback effects where the effectReturn is fed back into the same channel.\n */\nexport class StereoFeedbackEffect extends StereoEffect {\n  constructor(options) {\n    super(options);\n    this.feedback = new Signal({\n      context: this.context,\n      value: options.feedback,\n      units: \"normalRange\"\n    });\n    this._feedbackL = new Gain({\n      context: this.context\n    });\n    this._feedbackR = new Gain({\n      context: this.context\n    });\n    this._feedbackSplit = new Split({\n      context: this.context,\n      channels: 2\n    });\n    this._feedbackMerge = new Merge({\n      context: this.context,\n      channels: 2\n    });\n    this._merge.connect(this._feedbackSplit);\n    this._feedbackMerge.connect(this._split);\n    // the left output connected to the left input\n    this._feedbackSplit.connect(this._feedbackL, 0, 0);\n    this._feedbackL.connect(this._feedbackMerge, 0, 0);\n    // the right output connected to the right input\n    this._feedbackSplit.connect(this._feedbackR, 1, 0);\n    this._feedbackR.connect(this._feedbackMerge, 0, 1);\n    // the feedback control\n    this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n    readOnly(this, [\"feedback\"]);\n  }\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      feedback: 0.5\n    });\n  }\n  dispose() {\n    super.dispose();\n    this.feedback.dispose();\n    this._feedbackL.dispose();\n    this._feedbackR.dispose();\n    this._feedbackSplit.dispose();\n    this._feedbackMerge.dispose();\n    return this;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}