{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  offset: 1\n};\nexport const createConstantSourceNodeConstructor = (audioNodeConstructor, createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n  return class ConstantSourceNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n      const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const constantSourceNodeRenderer = isOffline ? createConstantSourceNodeRendererFactory() : null;\n      super(context, false, nativeConstantSourceNode, constantSourceNodeRenderer);\n      this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n      this._nativeConstantSourceNode = nativeConstantSourceNode;\n      /*\n       * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and minValue\n       * for GainNodes.\n       */\n      this._offset = createAudioParam(this, isOffline, nativeConstantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._onended = null;\n    }\n    get offset() {\n      return this._offset;\n    }\n    get onended() {\n      return this._onended;\n    }\n    set onended(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeConstantSourceNode.onended = wrappedListener;\n      const nativeOnEnded = this._nativeConstantSourceNode.onended;\n      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n    }\n    start() {\n      let when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      this._nativeConstantSourceNode.start(when);\n      if (this._constantSourceNodeRenderer !== null) {\n        this._constantSourceNodeRenderer.start = when;\n      }\n      if (this.context.state !== 'closed') {\n        setInternalStateToActive(this);\n        const resetInternalStateToPassive = () => {\n          this._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n          if (isActiveAudioNode(this)) {\n            setInternalStateToPassive(this);\n          }\n        };\n        this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);\n      }\n    }\n    stop() {\n      let when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      this._nativeConstantSourceNode.stop(when);\n      if (this._constantSourceNodeRenderer !== null) {\n        this._constantSourceNodeRenderer.stop = when;\n      }\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}