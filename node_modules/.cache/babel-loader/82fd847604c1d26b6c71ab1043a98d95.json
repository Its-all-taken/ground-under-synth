{"ast":null,"code":"import React, { Component } from 'react';\nimport * as Tone from 'tone';\nimport * as firstSettings from '../tunes/firstDrum.js';\nimport * as secondSettings from '../tunes/secondDrum.js';\nimport * as thirdSettings from '../tunes/thirdDrum.js';\nimport * as fourthSettings from '../tunes/fourthDrum.js';\nimport SC_Button from '../components/SC_Button';\nimport Muted from './Muted';\nimport SC_ToggleButton from '../components/SC_ToggleButton.jsx';\nlet firstSynth;\nlet channelFirst;\nlet secondSynth;\nlet channelSecond;\nlet thirdSynth;\nlet channelThird;\nlet fourthSynth;\nlet channelFourth;\nexport default class Drums extends Component {\n  constructor(props) {\n    super(props);\n    this.handleDrumsStart = () => {\n      const _this$state = this.state,\n        firstSettings = _this$state.firstSettings,\n        secondSettings = _this$state.secondSettings,\n        thirdSettings = _this$state.thirdSettings,\n        fourthSettings = _this$state.fourthSettings;\n      //\n      firstSynth = new Tone.Synth(firstSettings.synth);\n      channelFirst = new Tone.Channel(firstSettings.channel).toDestination();\n      firstSynth.chain(channelFirst);\n      const firstPart = new Tone.Part((time, note) => {\n        firstSynth.triggerAttackRelease(note.noteName, note.duration, time, note.velocity);\n      }, firstSettings.sequence.steps).start(0);\n      firstPart.loopEnd = firstSettings.sequence.duration;\n      firstPart.loop = true;\n      //\n      secondSynth = new Tone.Synth(secondSettings.synth);\n      channelSecond = new Tone.Channel(secondSettings.channel).toDestination();\n      secondSynth.chain(channelSecond);\n      const secondPart = new Tone.Part((time, note) => {\n        secondSynth.triggerAttackRelease(note.noteName, note.duration, time, note.velocity);\n      }, secondSettings.sequence.steps).start(0);\n      secondPart.loopEnd = secondSettings.sequence.duration;\n      secondPart.loop = true;\n      //\n      thirdSynth = new Tone.Synth(thirdSettings.synth);\n      channelThird = new Tone.Channel(thirdSettings.channel).toDestination();\n      thirdSynth.chain(channelThird);\n      const thirdPart = new Tone.Part((time, note) => {\n        thirdSynth.triggerAttackRelease(note.noteName, note.duration, time, note.velocity);\n      }, thirdSettings.sequence.steps).start(0);\n      thirdPart.loopEnd = thirdSettings.sequence.duration;\n      thirdPart.loop = true;\n      //\n      fourthSynth = new Tone.Synth(fourthSettings.synth);\n      channelFourth = new Tone.Channel(fourthSettings.channel).toDestination();\n      fourthSynth.chain(channelFourth);\n      const fourthPart = new Tone.Part((time, note) => {\n        fourthSynth.triggerAttackRelease(note.noteName, note.duration, time, note.velocity);\n      }, fourthSettings.sequence.steps).start(0);\n      fourthPart.loopEnd = fourthSettings.sequence.duration;\n      fourthPart.loop = true;\n    };\n    this.handleMute = (property, value) => {\n      const firstSettings = this.state.firstSettings;\n      if (property === 'channelMute') {\n        channelFirst.mute = value;\n        firstSettings.channel.mute = value;\n      }\n      this.setState({\n        firstSettings\n      });\n    };\n    this.handleMuteTwo = (property, value) => {\n      const secondSettings = this.state.secondSettings;\n      if (property === 'channelMute') {\n        channelSecond.mute = value;\n        secondSettings.channel.mute = value;\n      }\n      this.setState({\n        secondSettings\n      });\n    };\n    this.handleMuteThird = (property, value) => {\n      const thirdSettings = this.state.thirdSettings;\n      if (property === 'channelMute') {\n        channelThird.mute = value;\n        thirdSettings.channel.mute = value;\n      }\n      this.setState({\n        thirdSettings\n      });\n    };\n    this.handleMuteFourth = (property, value) => {\n      const fourthSettings = this.state.fourthSettings;\n      if (property === 'channelMute') {\n        channelFourth.mute = value;\n        fourthSettings.channel.mute = value;\n      }\n      this.setState({\n        fourthSettings\n      });\n    };\n    this.state = {\n      firstSettings,\n      secondSettings,\n      thirdSettings,\n      fourthSettings\n    };\n  }\n  render() {\n    const _this$state2 = this.state,\n      firstSettings = _this$state2.firstSettings,\n      secondSettings = _this$state2.secondSettings,\n      thirdSettings = _this$state2.thirdSettings,\n      fourthSettings = _this$state2.fourthSettings;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Drums\"\n    }, /*#__PURE__*/React.createElement(SC_ToggleButton, {\n      text: \"Start drums\",\n      handleClick: this.handleDrumsStart\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"DrumSamples\"\n    }, /*#__PURE__*/React.createElement(Muted, {\n      settings: firstSettings,\n      handleValueChange: this.handleMute\n    }), /*#__PURE__*/React.createElement(Muted, {\n      settings: secondSettings,\n      handleValueChange: this.handleMuteTwo\n    }), /*#__PURE__*/React.createElement(Muted, {\n      settings: thirdSettings,\n      handleValueChange: this.handleMuteThird\n    }), /*#__PURE__*/React.createElement(Muted, {\n      settings: fourthSettings,\n      handleValueChange: this.handleMuteFourth\n    })));\n  }\n}","map":{"version":3,"names":["React","Component","Tone","firstSettings","secondSettings","thirdSettings","fourthSettings","SC_Button","Muted","SC_ToggleButton","firstSynth","channelFirst","secondSynth","channelSecond","thirdSynth","channelThird","fourthSynth","channelFourth","Drums","constructor","props","handleDrumsStart","state","Synth","synth","Channel","channel","toDestination","chain","firstPart","Part","time","note","triggerAttackRelease","noteName","duration","velocity","sequence","steps","start","loopEnd","loop","secondPart","thirdPart","fourthPart","handleMute","property","value","mute","setState","handleMuteTwo","handleMuteThird","handleMuteFourth","render"],"sources":["/Users/mar/Share/sea/app/javascript/prototypes/modules/Drums.jsx"],"sourcesContent":["import React, { Component } from 'react'\nimport * as Tone from 'tone'\nimport * as firstSettings from '../tunes/firstDrum.js'\nimport * as secondSettings from '../tunes/secondDrum.js'\nimport * as thirdSettings from '../tunes/thirdDrum.js'\nimport * as fourthSettings from '../tunes/fourthDrum.js'\nimport SC_Button from '../components/SC_Button'\nimport Muted from './Muted'\nimport SC_ToggleButton from '../components/SC_ToggleButton.jsx'\n\nlet firstSynth\nlet channelFirst\n\nlet secondSynth\nlet channelSecond\n\nlet thirdSynth\nlet channelThird\n\nlet fourthSynth\nlet channelFourth\n\nexport default class Drums extends Component {\n    constructor(props) {\n      super(props)\n  \n      this.state = {\n        firstSettings, secondSettings, thirdSettings, fourthSettings\n      }\n    }\n  \n    handleDrumsStart = () => {\n        const { firstSettings, secondSettings, thirdSettings, fourthSettings } = this.state\n        //\n        firstSynth = new Tone.Synth(firstSettings.synth)\n\n        channelFirst = new Tone.Channel(firstSettings.channel).toDestination()\n        firstSynth.chain(channelFirst)\n\n        const firstPart = new Tone.Part((time, note) => {\n          firstSynth.triggerAttackRelease(\n            note.noteName,\n            note.duration,\n            time,\n            note.velocity\n          )\n        }, firstSettings.sequence.steps).start(0)\n    \n        firstPart.loopEnd = firstSettings.sequence.duration\n        firstPart.loop = true\n        //\n        secondSynth = new Tone.Synth(secondSettings.synth)\n\n        channelSecond = new Tone.Channel(secondSettings.channel).toDestination()\n        secondSynth.chain(channelSecond)\n\n        const secondPart = new Tone.Part((time, note) => {\n          secondSynth.triggerAttackRelease(\n            note.noteName,\n            note.duration,\n            time,\n            note.velocity\n          )\n        }, secondSettings.sequence.steps).start(0)\n    \n        secondPart.loopEnd = secondSettings.sequence.duration\n        secondPart.loop = true\n        //\n        thirdSynth = new Tone.Synth(thirdSettings.synth)\n\n        channelThird = new Tone.Channel(thirdSettings.channel).toDestination()\n        thirdSynth.chain(channelThird)\n\n        const thirdPart = new Tone.Part((time, note) => {\n          thirdSynth.triggerAttackRelease(\n            note.noteName,\n            note.duration,\n            time,\n            note.velocity\n          )\n        }, thirdSettings.sequence.steps).start(0)\n    \n        thirdPart.loopEnd = thirdSettings.sequence.duration\n        thirdPart.loop = true\n        //\n        fourthSynth = new Tone.Synth(fourthSettings.synth)\n\n        channelFourth = new Tone.Channel(fourthSettings.channel).toDestination()\n        fourthSynth.chain(channelFourth)\n\n        const fourthPart = new Tone.Part((time, note) => {\n          fourthSynth.triggerAttackRelease(\n            note.noteName,\n            note.duration,\n            time,\n            note.velocity\n          )\n        }, fourthSettings.sequence.steps).start(0)\n    \n        fourthPart.loopEnd = fourthSettings.sequence.duration\n        fourthPart.loop = true\n      }\n\n      handleMute = (property, value) => {\n        const { firstSettings } = this.state\n    \n        if (property === 'channelMute') {\n          channelFirst.mute = value\n          firstSettings.channel.mute = value\n        } \n    \n        this.setState({\n          firstSettings\n        })\n      }\n      handleMuteTwo = (property, value) => {\n        const { secondSettings } = this.state\n    \n        if (property === 'channelMute') {\n          channelSecond.mute = value\n          secondSettings.channel.mute = value\n        } \n    \n        this.setState({\n          secondSettings\n        })\n      }\n      handleMuteThird = (property, value) => {\n        const { thirdSettings } = this.state\n    \n        if (property === 'channelMute') {\n          channelThird.mute = value\n          thirdSettings.channel.mute = value\n        } \n    \n        this.setState({\n          thirdSettings\n        })\n      }\n      handleMuteFourth = (property, value) => {\n        const { fourthSettings } = this.state\n    \n        if (property === 'channelMute') {\n          channelFourth.mute = value\n          fourthSettings.channel.mute = value\n        } \n    \n        this.setState({\n          fourthSettings\n        })\n      }\n  \n    render(){\n        const { firstSettings, secondSettings, thirdSettings, fourthSettings} = this.state\n\n      return (\n        <div className=\"Drums\">\n        <SC_ToggleButton\n            text=\"Start drums\"\n            handleClick={this.handleDrumsStart}\n          />\n            <div className=\"DrumSamples\">\n              <Muted\n              settings = {firstSettings}\n              handleValueChange = {this.handleMute}\n              />\n              <Muted\n                settings = {secondSettings}\n                handleValueChange = {this.handleMuteTwo}\n              />\n              <Muted\n                settings = {thirdSettings}\n                handleValueChange = {this.handleMuteThird}\n              />\n              <Muted\n                settings = {fourthSettings}\n                handleValueChange = {this.handleMuteFourth}\n              />\n          </div>\n        </div>\n      )\n\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}